Index: src/main/java/org/example/WareHouseService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\n\nimport java.util.*;\n\n\npublic class WareHouseService {\n        Scanner input = new Scanner(System.in);\n\n        ProductPOJO nesne = new ProductPOJO(123,\"un\",\"hekimoglu\",100,\"kg\",\"kenar\");\n        private static Map<Integer, ProductPOJO> deneme = new HashMap<>();\n        //9 ve 10 Satir Deneme Icin Olusturuldu Dikkate Almayiniz\n\n        public void mainMenu(){\n                Scanner input = new Scanner(System.in);\n                int secim;\n\n                do {\n                        System.out.println(\"Ana Menü\");\n                        System.out.println(\"1. Ürün Tanımla\");\n                        System.out.println(\"2. Ürünleri Görüntüle\");\n                        System.out.println(\"3. Yeni Ürün Girişi\");\n                        System.out.println(\"4. Raf Atama\");\n                        System.out.println(\"5. Ürün Çıkışı\");\n                        System.out.println(\"0. Çıkış\");\n                        System.out.print(\"Lütfen bir seçenek girin: \");\n\n                        secim = input.nextInt();\n                        input.nextLine(); // Buffer temizleme\n\n                        switch (secim) {\n                                case 1:\n                                        productDefine();\n                                        break;\n                                case 2:\n                                        productView();\n                                        break;\n                                case 3:\n                                        newProduct();\n                                        break;\n                                case 4:\n                                        shelfAssign();\n                                        break;\n                                case 5:\n                                        outOfProduct();\n                                        break;\n                                case 0:\n                                        System.out.println(\"Çıkılıyor...\");\n                                        break;\n                                default:\n                                        System.out.println(\"Geçersiz seçim, lütfen tekrar deneyin.\");\n                        }\n                } while (secim != 0);\n            //------Depo Giris Ekranidir Secimlerin Yapilmasi ve Islemlerin Baslatilmasi bu Kisimda Kodlanacaktir.\n            //Tasarim Kismi Bu Kisimda Olacak Yapilinca Toplu Bir Sekilde Bura Tasarimi Uzerinde Tartisilacak\n            //Ozel Kutuphaneler Ile Bu Ana Ekran Suslenebilir - Amac Konsolun Goze Hitap Etmesi\n            //----YAPACCAK KISILER: ------- todo:Fatih ,Edip\n        }\n        public void selectedValue(){\n            //-----Kullanicidan Degerin Surekli Alinabilmesi Icin Dongu Olusturulmali\n            //----YAPACCAK KISILER: ------- todo:Fatih ,Edip\n        }\n        public void productDefine(){\n            //----urunun ismi, ureticisi ve birimi girilecek. id  alınacak.\n            // MAP<id,pojoUrun>   RAF=\"-\" ve Miktar=0 //arraylist. default olarak raf ve miktar atamalari burda yapilacak\n            //id ilk urun kaydinda otomatik kaydedilecek --id BEZERSIZ OLMALI\n            //----YAPACCAK KISILER: ------- todo: Emircan, Aysegul\n        }\n        public void productView(){\n            // urunListele     ==> tanimlanan urunler listelenecek.\n            // urunun adeti ve raf numarasi tanimlama yapilmadiysa default deger gorunsun.\n            //  printf(%10)\n\n            //----Ekran CIKTISI----TEmelde bu sekilde gorunmeli fakat burasida suslenebilir\n           //     id      ismi    ureticisi   miktari     birimi      raf\n           //    ---------------------------------------------------------------\n           //     or: 1000     un     hekimoglu   0           cuval       null\n           //----YAPACCAK KISILER: -------  todo: Belkis, Merve\n        }\n        public void newProduct(){\n           // urunGirisi      ==> giris yapmak istedigimiz urnunun id numarasi ile girecegiz.\n\n            //id ye gore urun aramasi yapilip---DIKKAT burda id olup olmadigi kontrol edilecek\n            // try-catch ile urun id int disinda girilmesi gibi olusabilecek hatalar yakalanacak\n            // oncelikle veri girilecek urun id kullanicidan istenip id ye gore urun miktar kaydi yapilacak\n\n            //----YAPACCAK KISILER: ------- todo: Tayfun, Ibrahim\n                System.out.print(\"Lütfen Miktar Güncellemesi Yapacaginiz Urun id Giriniz: \");\n                int idFromUser = input.nextInt();;\n                                // todo: do while ile kodun surekliligi saglanacak\n                try {\n                        if (idFromUser > 100 && idFromUser < 110) {\n                                if (deneme.containsKey(idFromUser)) {\n                                        System.out.print(\"Lütfen Eklenecek Miktarı Giriniz: \"); //todo: miktarin gecerliligi kontrol edilecek\n                                        int miktar = input.nextInt();\n                                        deneme.get(idFromUser).setMiktar(deneme.get(idFromUser).getMiktar() + miktar);\n                                        productView();\n                                } else {\n                                        System.out.println(\"Bu ID'ye sahip ürün bulunamadı.\");\n                                }\n                        } else {\n                                System.out.println(\"Lütfen Geçerli Bir Değer Giriniz\");\n                        }\n                } catch (InputMismatchException e) {\n                        System.err.println(\"Hatalı giriş! Lütfen bir sayı giriniz.\");\n                }\n        }\n        public void shelfAssign(){\n            // rafa koyma methodu dinamik olacak urun kaydi yapildiginda raf default ayara cekilecek\n            //raf sayimiz 10 olarak belirlenecek --> her raf bir urun alacagi icin dolu raflar ustune eklenmemeli\n            //bos raflar  liste halinde musteriye gosterilecek - musteri bos olan raflardan birini sececek\n            //burdada olusabilecek hatalari kontrol etmemiz gerek try-catch\n            //urunuRafaKoy    ==> listeden urunu sececegiz ve id numarasina gore urunu rafa koyacagiz.\n\n            //----YAPACCAK KISILER: ------- todo: Mustafa, Zeynep\n        }\n        public void outOfProduct(){\n            // urun miktar guncelemeleri id uzerinden konrollerle yapilacak\n            // urun miktarinin azaltimi yapilacak - urun cikisi yapilacak\n            //urun miktarindan fazla urun talebi oldugunda elimizdeki urun miktari belirtilip UYARI verilecek yeterli degil denebilir\n            //urun tamamen biterse raf default duruma getirilecek\n            //urun miktarinda azalma olunca raf degismeyecek\n\n            //urun adedi 0dan az olamaz. 0 olunca urun tanimlamasi silinmesin. sadece miktari 0 olsun.\n             //exception urun adedi 0 altina duserse exeption firlatabilirsin\n               //===> yaptigimiz tum degisiklikler listede de gorunsun.\n\n            //----YAPACCAK KISILER: ------- todo: Neval, Belkis\n        }\n\n\n\n\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/WareHouseService.java b/src/main/java/org/example/WareHouseService.java
--- a/src/main/java/org/example/WareHouseService.java	(revision bc1e461583a5dd415d871375abf44b5ffddcf020)
+++ b/src/main/java/org/example/WareHouseService.java	(date 1731084460937)
@@ -4,134 +4,308 @@
 
 
 public class WareHouseService {
-        Scanner input = new Scanner(System.in);
+    public static Scanner input;
+    static int id;
+    static HashMap<Integer, ProductPOJO> wareHouseService;
 
-        ProductPOJO nesne = new ProductPOJO(123,"un","hekimoglu",100,"kg","kenar");
-        private static Map<Integer, ProductPOJO> deneme = new HashMap<>();
-        //9 ve 10 Satir Deneme Icin Olusturuldu Dikkate Almayiniz
+    ProductPOJO nesne = new ProductPOJO("un", "hekimoglu", 100, "kg", "kenar");
+
+    Scanner input = new Scanner(System.in);//kullanicidan girdi almak icin
+    private long idCounter = 1000;  // Otomatik ID üretimi için
+    private Map<Integer, ProductPOJO> products = new HashMap<>();//urunler buraya dolacak
+    ProductPOJO nesne = new ProductPOJO(123, "un", "hekimoglu", 100, "kg", "kenar");
+
+    private static Map<Integer, ProductPOJO> deneme = new HashMap<>();
+    //9 ve 10 Satir Deneme Icin Olusturuldu Dikkate Almayiniz
 
-        public void mainMenu(){
-                Scanner input = new Scanner(System.in);
-                int secim;
+
+    HashMap<Integer, Integer> shelfMap = new HashMap<>();
+    int shelfCount = 10;
+    int shelfCapacity = 100;
+    private int QuantitytoAdd;
+
+    public WareHouseService() {
+        // Tüm rafları başlangıçta 0 dolulukla başlatıyoruz
+        for (int i = 1; i <= shelfCount; i++) {
+            shelfMap.put(i, 0);
+        }
+    }
+
+    public void mainMenu() {
+
+        // Scanner input = new Scanner(System.in);
+
+        //Scanner input = new Scanner(System.in);
+
+        int secim;
 
-                do {
-                        System.out.println("Ana Menü");
-                        System.out.println("1. Ürün Tanımla");
-                        System.out.println("2. Ürünleri Görüntüle");
-                        System.out.println("3. Yeni Ürün Girişi");
-                        System.out.println("4. Raf Atama");
-                        System.out.println("5. Ürün Çıkışı");
-                        System.out.println("0. Çıkış");
-                        System.out.print("Lütfen bir seçenek girin: ");
+        do {
+            System.out.println("Ana Menü");
+            System.out.println("1. Ürün Tanımla");
+            System.out.println("2. Ürünleri Listeleme");
+            System.out.println("3. Yeni Ürün Girişi");
+            System.out.println("4. Raf Atama");
+            System.out.println("5. Ürün Çıkışı");
+            System.out.println("0. Çıkış");
+            System.out.print("Lütfen bir seçenek girin: ");
 
-                        secim = input.nextInt();
-                        input.nextLine(); // Buffer temizleme
+            secim = input.nextInt();
+            // input.nextLine(); // Buffer temizleme
 
-                        switch (secim) {
-                                case 1:
-                                        productDefine();
-                                        break;
-                                case 2:
-                                        productView();
-                                        break;
-                                case 3:
-                                        newProduct();
-                                        break;
-                                case 4:
-                                        shelfAssign();
-                                        break;
-                                case 5:
-                                        outOfProduct();
-                                        break;
-                                case 0:
-                                        System.out.println("Çıkılıyor...");
-                                        break;
-                                default:
-                                        System.out.println("Geçersiz seçim, lütfen tekrar deneyin.");
-                        }
-                } while (secim != 0);
-            //------Depo Giris Ekranidir Secimlerin Yapilmasi ve Islemlerin Baslatilmasi bu Kisimda Kodlanacaktir.
-            //Tasarim Kismi Bu Kisimda Olacak Yapilinca Toplu Bir Sekilde Bura Tasarimi Uzerinde Tartisilacak
-            //Ozel Kutuphaneler Ile Bu Ana Ekran Suslenebilir - Amac Konsolun Goze Hitap Etmesi
-            //----YAPACCAK KISILER: ------- todo:Fatih ,Edip
-        }
-        public void selectedValue(){
-            //-----Kullanicidan Degerin Surekli Alinabilmesi Icin Dongu Olusturulmali
-            //----YAPACCAK KISILER: ------- todo:Fatih ,Edip
-        }
-        public void productDefine(){
-            //----urunun ismi, ureticisi ve birimi girilecek. id  alınacak.
-            // MAP<id,pojoUrun>   RAF="-" ve Miktar=0 //arraylist. default olarak raf ve miktar atamalari burda yapilacak
-            //id ilk urun kaydinda otomatik kaydedilecek --id BEZERSIZ OLMALI
-            //----YAPACCAK KISILER: ------- todo: Emircan, Aysegul
+            switch (secim) {
+                case 1:
+                    productDefine();
+                    break;
+                case 2:
+                    productView();
+                    break;
+                case 3:
+                    newProduct();
+                    break;
+                case 4:
+                    shelfAssign();
+                    break;
+                case 5:
+                    outOfProduct();
+                    break;
+                case 0:
+                    System.out.println("Çıkılıyor...");
+                    break;
+                default:
+                    System.out.println("Geçersiz seçim, lütfen tekrar deneyin.");
+            }
+        } while (secim != 0);
+        //------Depo Giris Ekranidir Secimlerin Yapilmasi ve Islemlerin Baslatilmasi bu Kisimda Kodlanacaktir.
+        //Tasarim Kismi Bu Kisimda Olacak Yapilinca Toplu Bir Sekilde Bura Tasarimi Uzerinde Tartisilacak
+        //Ozel Kutuphaneler Ile Bu Ana Ekran Suslenebilir - Amac Konsolun Goze Hitap Etmesi
+        //----YAPACCAK KISILER: ------- todo:Fatih ,Edip
+    }
+
+    public void selectedValue() {
+        //-----Kullanicidan Degerin Surekli Alinabilmesi Icin Dongu Olusturulmali
+        //----YAPACCAK KISILER: ------- todo:Fatih ,Edip
+    }
+
+    public void productDefine() {
+        //----urunun ismi, ureticisi ve birimi girilecek. id  alınacak.
+        // MAP<id,pojoUrun>   RAF="-" ve Miktar=0 //arraylist. default olarak raf ve miktar atamalari burda yapilacak
+        //id ilk urun kaydinda otomatik kaydedilecek --id BEZERSIZ OLMALI
+        //----YAPACCAK KISILER: ------- todo: Emircan, Aysegul
+        input.nextLine();
+        System.out.print("Bir ürün giriniz : ");
+        String ürünİsmi = input.nextLine();
+        System.out.print("Ürünün üreticisi : ");
+        String üreticisi = input.nextLine();
+        int miktar = 0;
+        System.out.print("Ürünün birimini giriniz : ");
+        String birim = input.nextLine();
+        String raf = "-";
+        boolean mevcutMu = wareHouseService.values().stream()
+                .anyMatch(product -> product.getUrunIsmi().equals(ürünİsmi) && product.getUretici().equals(üreticisi));
+
+        if (mevcutMu) {
+            System.out.println("Bu ürün ve üretici zaten mevcut!");
+            productDefine();
+        } else {
+            ProductPOJO productPOJO = new ProductPOJO(ürünİsmi, üreticisi, miktar, birim, raf);
+
+            wareHouseService.put(id, productPOJO);
+            int var10001 = id;
+            System.out.println("\tID: " + var10001 + " " + wareHouseService.get(id));
+            id++;
+
+            System.out.println("Ürün eklemeye devam etmek ister misiniz? E/H girin!");
+            String cevap = input.next().toUpperCase();
+            if (cevap.equals("E")) {
+                this.productDefine();
+            }
         }
-        public void productView(){
-            // urunListele     ==> tanimlanan urunler listelenecek.
-            // urunun adeti ve raf numarasi tanimlama yapilmadiysa default deger gorunsun.
-            //  printf(%10)
+    }
+
+
+
+    // productView() start -----------------------------------------------------
+    /** Ürün listeleme  - Belkis - Neval */
+    public void productView() {
+        // Başlık çizgisi
+        System.out.println("-------------------------------------------------------------------------------------");
+        System.out.printf("\033[1;37m%-4s \033[1;32m| %-20s \033[1;33m| %-15s \033[1;34m| %-10s \033[1;35m| %-9s \033[1;36m| \033[1;37m%-5s \n",
+                "ID", "PRODUCT NAME", "MANUFACTURER", "AMOUNT", "UNIT TYPE", "SHELF");
+        System.out.println("-------------------------------------------------------------------------------------");
+
+        if (products.isEmpty()) {
+            // Ürün yoksa mesaj
+            System.out.println("Depoda ürün bulunmuyor.");
+        } else {
+            // Ürün bilgilerini farklı renklerde listelemek
+            products.values().forEach(product -> {
+                System.out.printf("\033[1;31m%-4s \033[1;32m| \033[1;33m%-20s \033[1;34m| \033[1;35m%-15s \033[1;36m| \033[1;37m%-10s \033[1;38m| \033[1;39m%-9s \033[1;37m| %-5s \n",
+                        product.getId(),
+                        product.getUrunIsmi(),
+                        product.getUretici(),
+                        product.getMiktar(),
+                        product.getBirim(),
+                        product.getRaf());
+            });
+        }
 
-            //----Ekran CIKTISI----TEmelde bu sekilde gorunmeli fakat burasida suslenebilir
-           //     id      ismi    ureticisi   miktari     birimi      raf
-           //    ---------------------------------------------------------------
-           //     or: 1000     un     hekimoglu   0           cuval       null
-           //----YAPACCAK KISILER: -------  todo: Belkis, Merve
-        }
-        public void newProduct(){
-           // urunGirisi      ==> giris yapmak istedigimiz urnunun id numarasi ile girecegiz.
+        System.out.println("-------------------------------------------------------------------------------------");
+    }
+    // productView() end -------------------------------------------------
+
+    public void newProduct() {
+        // urunGirisi      ==> giris yapmak istedigimiz urnunun id numarasi ile girecegiz.
 
-            //id ye gore urun aramasi yapilip---DIKKAT burda id olup olmadigi kontrol edilecek
-            // try-catch ile urun id int disinda girilmesi gibi olusabilecek hatalar yakalanacak
-            // oncelikle veri girilecek urun id kullanicidan istenip id ye gore urun miktar kaydi yapilacak
+        //id ye gore urun aramasi yapilip---DIKKAT burda id olup olmadigi kontrol edilecek
+        // try-catch ile urun id int disinda girilmesi gibi olusabilecek hatalar yakalanacak
+        // oncelikle veri girilecek urun id kullanicidan istenip id ye gore urun miktar kaydi yapilacak
 
-            //----YAPACCAK KISILER: ------- todo: Tayfun, Ibrahim
-                System.out.print("Lütfen Miktar Güncellemesi Yapacaginiz Urun id Giriniz: ");
-                int idFromUser = input.nextInt();;
-                                // todo: do while ile kodun surekliligi saglanacak
-                try {
-                        if (idFromUser > 100 && idFromUser < 110) {
-                                if (deneme.containsKey(idFromUser)) {
-                                        System.out.print("Lütfen Eklenecek Miktarı Giriniz: "); //todo: miktarin gecerliligi kontrol edilecek
-                                        int miktar = input.nextInt();
-                                        deneme.get(idFromUser).setMiktar(deneme.get(idFromUser).getMiktar() + miktar);
-                                        productView();
-                                } else {
-                                        System.out.println("Bu ID'ye sahip ürün bulunamadı.");
-                                }
-                        } else {
-                                System.out.println("Lütfen Geçerli Bir Değer Giriniz");
-                        }
-                } catch (InputMismatchException e) {
-                        System.err.println("Hatalı giriş! Lütfen bir sayı giriniz.");
-                }
-        }
-        public void shelfAssign(){
-            // rafa koyma methodu dinamik olacak urun kaydi yapildiginda raf default ayara cekilecek
-            //raf sayimiz 10 olarak belirlenecek --> her raf bir urun alacagi icin dolu raflar ustune eklenmemeli
-            //bos raflar  liste halinde musteriye gosterilecek - musteri bos olan raflardan birini sececek
-            //burdada olusabilecek hatalari kontrol etmemiz gerek try-catch
-            //urunuRafaKoy    ==> listeden urunu sececegiz ve id numarasina gore urunu rafa koyacagiz.
+        //----YAPACCAK KISILER: ------- todo: Tayfun, Ibrahim
+        System.out.print("Lütfen Miktar Güncellemesi Yapacaginiz Urun id Giriniz: ");
+        int idFromUser = input.nextInt();
+        ;
+        // todo: do while ile kodun surekliligi saglanacak
+        try {
+            if (idFromUser > 100 && idFromUser < 110) {
+                if (deneme.containsKey(idFromUser)) {
+                    System.out.print("Lütfen Eklenecek Miktarı Giriniz: "); //todo: miktarin gecerliligi kontrol edilecek
+                    int miktar = input.nextInt();
+                    deneme.get(idFromUser).setMiktar(deneme.get(idFromUser).getMiktar() + miktar);
+                    productView();
+                } else {
+                    System.out.println("Bu ID'ye sahip ürün bulunamadı.");
+                }
+            } else {
+                System.out.println("Lütfen Geçerli Bir Değer Giriniz");
+            }
+        } catch (InputMismatchException e) {
+            System.err.println("Hatalı giriş! Lütfen bir sayı giriniz.");
+        }
+    }
+
+    public void shelfAssign() {
+        // rafa koyma methodu dinamik olacak urun kaydi yapildiginda raf default ayara cekilecek
+        //raf sayimiz 10 olarak belirlenecek --> her raf bir urun alacagi icin dolu raflar ustune eklenmemeli
+        //bos raflar  liste halinde musteriye gosterilecek - musteri bos olan raflardan birini sececek
+        //burdada olusabilecek hatalari kontrol etmemiz gerek try-catch
+        //urunuRafaKoy    ==> listeden urunu sececegiz ve id numarasina gore urunu rafa koyacagiz.
 
-            //----YAPACCAK KISILER: ------- todo: Mustafa, Zeynep
+        //----YAPACCAK KISILER: ------- todo: Mustafa, Zeynep
+
+
+        deneme.put(123, new ProductPOJO("un", "hekimoglu", 100, "kg", "kenar"));
+
+        // Tüm rafları başlangıçta 0 dolulukla başlatmak icin
+        for (int i = 1; i <= shelfCount; i++) {
+            shelfMap.put(i, 0);
+        }
+        // Raf doluluk durumunu göstermek için
+        System.out.println("\n---- Raf Durumu ----");
+        for (int i = 1; i <= shelfCount; i++) {
+            int currentQuantity = shelfMap.getOrDefault(i, 0); // Null olmaması için varsayılan 0 değeri
+            System.out.println("Raf " + i + ": " + currentQuantity + "/" + shelfCapacity);
+        }
+        int idFromUser = -1; // Geçici başlangıç değeri
+        while (true) {
+            System.out.print("Lütfen bir ürün ID numarası girin: ");
+            try {
+
+                idFromUser = input.nextInt();
+                // ID'nin geçerli olup olmadığını kontrol et
+                if (deneme.containsKey(idFromUser)) {
+                    System.out.println("Geçerli bir ID girdiniz.");
+                    break; // Geçerli bir ID girildiğinde döngüden çık
+                } else {
+                    System.out.println("Geçersiz bir ID numarası girdiniz. Lütfen tekrar deneyin.");
+                }
+            } catch (InputMismatchException e) {
+                System.out.println("Geçersiz giriş! Lütfen bir sayı giriniz.");
+                input.nextLine(); // Scanner'daki hatalı girdiyi temizler
+            }
         }
-        public void outOfProduct(){
-            // urun miktar guncelemeleri id uzerinden konrollerle yapilacak
-            // urun miktarinin azaltimi yapilacak - urun cikisi yapilacak
-            //urun miktarindan fazla urun talebi oldugunda elimizdeki urun miktari belirtilip UYARI verilecek yeterli degil denebilir
-            //urun tamamen biterse raf default duruma getirilecek
-            //urun miktarinda azalma olunca raf degismeyecek
-
-            //urun adedi 0dan az olamaz. 0 olunca urun tanimlamasi silinmesin. sadece miktari 0 olsun.
-             //exception urun adedi 0 altina duserse exeption firlatabilirsin
-               //===> yaptigimiz tum degisiklikler listede de gorunsun.
-
-            //----YAPACCAK KISILER: ------- todo: Neval, Belkis
-        }
-
-
-
+        // Hangi rafa atamak istediğini almak
+        int selectedShelf = -1; // Geçici başlangıç değeri ,-1 genel olarak "atanmamış" anlamını taşıdığı için
+        while (true) {
+            System.out.print("Lütfen ürün atamak istediğiniz raf numarasını seçin: ");
+            try {
+                selectedShelf = input.nextInt();
+
+                // Raf numarasının geçerli olup olmadığını kontrol et
+                if (selectedShelf >= 1 && selectedShelf <= shelfCount) {
+                    System.out.println("Geçerli bir raf numarası girdiniz.");
+                    break; // Geçerli bir raf numarası girildiğinde döngüden çık
+                } else {
+                    System.out.println("Geçersiz raf numarası. Lütfen 1 ile " + shelfCount + " arasında bir numara girin.");
+                }
+            } catch (InputMismatchException e) {
+                System.out.println("Geçersiz giriş! Lütfen bir sayı giriniz.");
+                input.nextLine(); // Scanner'daki hatalı girdiyi temizle
+            }
+        }
+        // Rafın doluluk durumunu alın
+        int currentQuantity = shelfMap.getOrDefault(selectedShelf, 0);
+
+
+        // Miktar girmek için
+        int quantityToAdd = 0; // Geçici baslangıc miktar değişkeni
+        boolean validQuantityInput = false; // Geçerli miktar kontrolü
+
+        while (!validQuantityInput) {
+            System.out.print("Eklemek istediğiniz ürün miktarını girin: ");
+            try {
+                quantityToAdd = input.nextInt(); // Kullanıcıdan miktar al
+                // Kapasiteyi kontrol et ve ekle
+                if (currentQuantity + quantityToAdd > shelfCapacity) {
+                    System.out.println("Hata: Bu kadar ürün eklemek kapasiteyi aşar! Mevcut kapasite: " + (shelfCapacity - currentQuantity));
+                    System.out.print("Lütfen mevcut raf kapasitesine göre bir miktar giriniz: ");
+                } else {
+                    // Rafı güncelle
+                    shelfMap.put(selectedShelf, currentQuantity + quantityToAdd);
+                    System.out.println("Ürün başarıyla eklendi. Raf " + selectedShelf + " şu anda " + shelfMap.get(selectedShelf) + "/" + shelfCapacity + " dolu.");
+                    validQuantityInput = true; // Geçerli miktar alındı, döngüden çık
+                }
+            } catch (InputMismatchException e) {
+                System.out.println("Hatalı giriş! Lütfen bir sayı giriniz."); // Hata mesajı
+                input.nextLine(); // Hatalı girişi temizle
+            }
+        }
+    }
+
+
+    /** Ürün çıkışı Belkis - Merve */
+
+    public void outOfProduct() {
+        //yetersiz stok uyarısı alma istemiyorum.
+        //stoktaki ürünleri göstersin sadece böyle bir tercih seçeneği sunalım
+        //outOfProduct yapabilmem için ürünleri görmem gerekiyor. ürünleri göstersin
+        //id üzerinden işlem yapacağız
+        //ürün çıkışı olduktan sonra güncel miktarı söylesin. stok bitti ise söylesin.
 
+        productView();//urun listeleme methodunu cagirdim. kullanicidan ID istiyor o yuzden liste gormem lazim. buyuk bir proje olsa olmaz
 
+        System.out.print("Ürün ID: ");
+        Long id = input.nextLong();//id aldım
+        //id kontrol
+        System.out.print("Çıkarılacak miktar: ");
+        int miktar = input.nextInt();//miktar aldım
+        ProductPOJO product = products.get(id);//verilen id li urunu getirdim ve product olarak kaydettim
 
-
+        if (product != null) {//null degilse
+            if (product.getMiktar() >= miktar) {//miktar verilen miktardan buyukse
+                product.setMiktar(product.getMiktar() - miktar);//miktari guncelliyorum
+                System.out.println("Ürün çıkışı yapıldı: " + product);
+            } else {
+                System.out.println("Yetersiz stok. Çıkış yapılamadı. Ürün çıkışı yapabilmek için geçerli bir miktar giriniz.");
+            }
+        } else {
+            System.out.println("Ürün bulunamadı.");
+        }
+    }
+    static {
+        input = new Scanner(System.in);
+        id = 100;
+        wareHouseService = new HashMap<>();
+    }
 
-}
+    }
+
Index: src/main/java/org/example/WareHouseMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\n\npublic class WareHouseMain {\n    public static void main(String[] args) {\n            WareHouseService action = new WareHouseService();\n            action.selectedValue();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/WareHouseMain.java b/src/main/java/org/example/WareHouseMain.java
--- a/src/main/java/org/example/WareHouseMain.java	(revision bc1e461583a5dd415d871375abf44b5ffddcf020)
+++ b/src/main/java/org/example/WareHouseMain.java	(date 1731084460936)
@@ -3,6 +3,6 @@
 public class WareHouseMain {
     public static void main(String[] args) {
             WareHouseService action = new WareHouseService();
-            action.selectedValue();
+            action.mainMenu();
     }
 }
Index: src/main/java/org/example/ProductPOJO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\n\npublic class ProductPOJO {\n\n    private  int id;\n    private  String urunIsmi;\n    private  String uretici;\n    private  int miktar;\n    private  String birim;\n    private  String raf;\n\n    public ProductPOJO(int id, String urunIsmi, String uretici, int miktar, String birim, String raf) {\n        this.id = id;\n        this.urunIsmi = urunIsmi;\n        this.uretici = uretici;\n        this.miktar = miktar;\n        this.birim = birim;\n        this.raf = raf;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public void setUrunIsmi(String urunIsmi) {\n        this.urunIsmi = urunIsmi;\n    }\n\n    public void setUretici(String uretici) {\n        this.uretici = uretici;\n    }\n\n    public void setMiktar(int miktar) {\n        this.miktar = miktar;\n    }\n\n    public void setBirim(String birim) {\n        this.birim = birim;\n    }\n\n    public void setRaf(String raf) {\n        this.raf = raf;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getUrunIsmi() {\n        return urunIsmi;\n    }\n\n    public String getUretici() {\n        return uretici;\n    }\n\n    public int getMiktar() {\n        return miktar;\n    }\n\n    public String getBirim() {\n        return birim;\n    }\n\n    public String getRaf() {\n        return raf;\n    }\n\n    @Override\n    public String toString() {\n        return \"ProductPOJO{\" +\n                \"id=\" + id +\n                \", urunIsmi='\" + urunIsmi + '\\'' +\n                \", uretici='\" + uretici + '\\'' +\n                \", miktar=\" + miktar +\n                \", birim='\" + birim + '\\'' +\n                \", raf='\" + raf + '\\'' +\n                '}';\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ProductPOJO.java b/src/main/java/org/example/ProductPOJO.java
--- a/src/main/java/org/example/ProductPOJO.java	(revision bc1e461583a5dd415d871375abf44b5ffddcf020)
+++ b/src/main/java/org/example/ProductPOJO.java	(date 1731084460936)
@@ -2,15 +2,13 @@
 
 public class ProductPOJO {
 
-    private  int id;
-    private  String urunIsmi;
-    private  String uretici;
-    private  int miktar;
-    private  String birim;
-    private  String raf;
+    private String urunIsmi;
+    private String uretici;
+    private int miktar;
+    private String birim;
+    private String raf;
 
-    public ProductPOJO(int id, String urunIsmi, String uretici, int miktar, String birim, String raf) {
-        this.id = id;
+    public ProductPOJO(String urunIsmi, String uretici, int miktar, String birim, String raf) {
         this.urunIsmi = urunIsmi;
         this.uretici = uretici;
         this.miktar = miktar;
@@ -18,10 +16,6 @@
         this.raf = raf;
     }
 
-    public void setId(int id) {
-        this.id = id;
-    }
-
     public void setUrunIsmi(String urunIsmi) {
         this.urunIsmi = urunIsmi;
     }
@@ -42,10 +36,6 @@
         this.raf = raf;
     }
 
-    public int getId() {
-        return id;
-    }
-
     public String getUrunIsmi() {
         return urunIsmi;
     }
@@ -68,13 +58,10 @@
 
     @Override
     public String toString() {
-        return "ProductPOJO{" +
-                "id=" + id +
-                ", urunIsmi='" + urunIsmi + '\'' +
-                ", uretici='" + uretici + '\'' +
-                ", miktar=" + miktar +
-                ", birim='" + birim + '\'' +
-                ", raf='" + raf + '\'' +
-                '}';
+        return "\n\tUrunIsmi= " + this.urunIsmi +
+                "\n\tUretici= " + this.uretici +
+                "\n\tMiktar= " + this.miktar +
+                "\n\tBirim= " + this.birim +
+                "\n\tRaf= " + this.raf;
     }
 }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_23\" default=\"true\" project-jdk-name=\"openjdk-23 (2)\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision bc1e461583a5dd415d871375abf44b5ffddcf020)
+++ b/.idea/misc.xml	(date 1731084532407)
@@ -11,4 +11,7 @@
   <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23 (2)" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
+  <component name="ProjectType">
+    <option name="id" value="jpab" />
+  </component>
 </project>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>warehouseProject</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <maven.compiler.source>21</maven.compiler.source>\n        <maven.compiler.target>21</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision bc1e461583a5dd415d871375abf44b5ffddcf020)
+++ b/pom.xml	(date 1731084460935)
@@ -13,5 +13,18 @@
         <maven.compiler.target>21</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>23</source>
+                    <target>23</target>
+                    <compilerArgs>--enable-preview</compilerArgs>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
 
 </project>
\ No newline at end of file
Index: .idea/material_theme_project_new.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/material_theme_project_new.xml b/.idea/material_theme_project_new.xml
new file mode 100644
--- /dev/null	(date 1731084460934)
+++ b/.idea/material_theme_project_new.xml	(date 1731084460934)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="MaterialThemeProjectNewConfig">
+    <option name="metadata">
+      <MTProjectMetadataState>
+        <option name="migrated" value="true" />
+        <option name="pristineConfig" value="false" />
+        <option name="userId" value="45ddeeb8:191bc54f45b:-7ffe" />
+      </MTProjectMetadataState>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/jpa-buddy.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jpa-buddy.xml b/.idea/jpa-buddy.xml
new file mode 100644
--- /dev/null	(date 1731084460934)
+++ b/.idea/jpa-buddy.xml	(date 1731084460934)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JpaBuddyIdeaProjectConfig">
+    <option name="renamerInitialized" value="true" />
+  </component>
+</project>
\ No newline at end of file
